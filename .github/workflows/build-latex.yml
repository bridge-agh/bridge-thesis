name: Build main.tex

on:
  push:
    branches:
      - main

jobs:
  update-release-with-file:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          root_file: main.tex
          latexmk_shell_escape: true

      - name: Update Release with New File
        uses: "actions/github-script@v6"
        with:
          script: |
            // Check if the release "latest" already exists, catch erros if it does not exist
            let release = null;
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: "latest"
              });
            } catch (error) {
              console.log("Release does not exist");
            }
            
            // If the release "latest" does exist, delete it
            if (release) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
            }
    
            // Create a new release "latest"

            // today date (include hours, minutes) format date as YYYY-MM-DD HH-MM
            const todayDate = new Date().toISOString().slice(0, 16).replace("T", " ").replace(/:/g, "-");
            const fileName = `bridge-thesis ${todayDate}.pdf`;

            const newRelease = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "latest",
              name: fileName,
              body: "latest thesis build",
              draft: false,
              prerelease: false
            });

            
            // Upload the file "main.pdf" from the root directory of the repository and attach it to the release "latest"
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: newRelease.data.id,
              name: fileName.replace(" ", "_"),
              data: require("fs").readFileSync("main.pdf")
            });
            
